<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="kdocs.xsl"?>
<kdoc title="All about kDocs!">
    <notes>
**kDocs** is a very simple static website framework written in XSLT.  This page
here will explain the included XML tags, and how you can use it in your own
documentation websites, if you so choose.  All you really need is the *kdocs.xsl*
file, and maybe the *linklist.xsl* and the JavaScript libraries for MagicXML and
Markdown.
    </notes>
    <section name="XML tags">
        <notes>
I think I should create a XSD file...
        </notes>
        <notes>
Every XML document should be inside a **kdocs** element, you should also set the
`title` attribute to set the title of the page.
        </notes>
    </section>
    <section name="example">
        <notes>
kDocs support syntax highlighting which is very useful to display examples.  The
XML tag for this is **example**.  You can change which language it should use in
the [XSLT template file](kdocs.xsl).
        </notes>
        <example>
program example;

begin
  writeln('This is how the example tag renders.');
end.
        </example>
    </section>
    <section name="notes">
        <notes>
You've been seeing the **notes** tag the most out of any other tag, it allows
you to easily insert [Markdown](https://daringfireball.net/projects/markdown/syntax)
into your kDocs documentation.
        </notes>
    </section>
    <section name="class">
        <notes>
This XML element is mainly for use with programming language documentation,
here is an example:
        </notes>
        <class name="TXSLTClass" inherit="TComponent" package="kdocs" unit="kxslt">
            <method name="Create">This is the creation method!</method>
            <method name="Run">This is the magical run method!</method>
            <notes>
Here are some more top secret notes for this class.
            </notes>
        </class>
        <notes>
Okay, there is a lot going on in that example there, if you view the source
you can compare it to what is being generated on the web page.

You may also notice the use of auto horizontal rules for separation.  Also note
that the **class** element can be standalone, and does not need to be placed
into a section element, in fact you do not need a section element at all.
        </notes>
    </section>
    <section name="wiki">
        <notes>
The **wiki** element allows you to easily reference a wiki of your choice
depending on what is placed into the XSLT template.  Here is an example.
        </notes>
        <wiki>Multithreaded_Application_Tutorial</wiki>
    </section>
    <section name="ref">
        <notes>
The **ref** XML tag is more specific to FreePascal, but the XSLT template can
be modified to make it point to another online reference point.  Here's an
example.
        </notes>
        <ref section="fcl">rttiutils</ref>
    </section>
    <section name="section">
        <notes>
The **section** XML tag has been used a lot in this XML document, it has a nice
feature where it can auto-generate a list of link to each section at the very
top of the document, as you might have noticed.  The **class** tag also does this.
        </notes>
    </section>
    <section name="link">
        <notes>
The **link** XML tag allows the creation of internal links, like the one you used
to find this *hidden* page.
        </notes>
    </section>
    <section name="contents.xml">
        <notes>
As you may have noticed at one point, there is a nice index on the left side of
all the pages generated by kDocs.  This is created by the `contents.xml` file,
and the look and feel of this is generated by the [linklist.xsl](linklist.xsl)
XSLT template file, and is loaded by the page using
[MagicXML](http://tomdavies.azurewebsites.net/magicxml/).
        </notes>
        <link kdoc="contents">contents.xml</link>
    </section>
</kdoc>